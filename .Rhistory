res <- st_intersection(ina, Leeds_OA)
res$RLength <- st_length(res)
res$RLength <- as.numeric(res$RLength)
res$RID <- seq(1,length(res$RLength),1)
zone.list1 <- sort(unique(array(res$code)))
Leeds_OA$Popu_estimate <- 0
for (item in zone.list1) {
zone.set1 <- (res$code == item)
resno.list <- res$RID[zone.set1]
pps <- 0
pp <- 0
for (item1 in resno.list) {
zone.set2 <- (res$ID == res$ID[which(res$RID == item1)])
pp <- (res$pop[which(res$RID == item1)])*(res$RLength[which(res$RID == item1)]/sum(res$RLength[zone.set2], na.rm = TRUE))
pps <- pps + pp
}
Leeds_OA$Popu_estimate[which(Leeds_OA$code == item)] <- pps
}
sum(Leeds_OA$Popu_estimate)
sum(Leeds_OA$pop)
cor.test(Leeds_OA$pop,Leeds_OA$Popu_estimate)
Leeds_OA$Network_error_MSOA_to_OA <- Leeds_OA$Popu_estimate - Leeds_OA$pop
table <- cbind(Leeds_OA$code, Leeds_OA$pop, Leeds_OA$Popu_estimate,Leeds_OA$Network_error_MSOA_to_OA)
colnames(table) <- c("code", "pop", "estimate", "error")
table
#LSOA to OA
ina <- st_intersection(Road_Leeds, Leeds_LSOA)
ina$Length <- st_length(ina)
ina$Length <- as.numeric(ina$Length)
ina$ID <- seq(1,length(ina$Length),1)
zone.list <- sort(unique(array(ina$code)))
ina$pop1 <- 0
for (item in zone.list) {
zone.set <- (ina$code == item)
inano.list <- ina$ID[zone.set]
for (item1 in inano.list) {
ina$pop1[which(ina$ID == item1)] <- (ina$pop[which(ina$ID == item1)])*(ina$Length[which(ina$ID == item1)]/sum(ina$Length[zone.set], na.rm = TRUE))
}
}
sum(ina$pop1)
sum(Leeds_LSOA$pop)
res <- st_intersection(ina,Leeds_OA)
res$RLength <- st_length(res)
res$RLength <- as.numeric(res$RLength)
res$RID <- seq(1,length(res$RLength),1)
zone.list1 <- sort(unique(array(res$code.1)))
Leeds_OA$Popu_estimate <- 0
for (item in zone.list1) {
zone.set1 <- (res$code.1 == item)
resno.list <- res$RID[zone.set1]
pps <- 0
pp <- 0
for (item1 in resno.list) {
zone.set2 <- (res$ID == res$ID[which(res$RID == item1)])
pp <- (res$pop1[which(res$RID == item1)])*(res$RLength[which(res$RID == item1)]/sum(res$RLength[zone.set2], na.rm = TRUE))
pps <- pps + pp
}
Leeds_OA$Popu_estimate[which(Leeds_OA$code == item)] <- pps
}
sum(Leeds_OA$Popu_estimate)
sum(Leeds_OA$pop)
cor.test(Leeds_OA$pop,Leeds_OA$Popu_estimate)
library(GISTools)
library(sp)
library(rgdal)
library(tmap)
library(scales)
library(ggplot2)
library(rtop)
library(deldir)
library(raster)
library(sf)
library(repmis)
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataAW.RData?raw=True")
## Leeds case
#check the population and household count
sum(Leeds_MSOA$Population, na.rm = T)
sum(Leeds_LSOA$pop, na.rm = T)
sum(Leeds_OA$pop, na.rm = T)
sum(Leeds_MSOA$hou_num)
sum(Leeds_LSOA$hou_num)
sum(Leeds_OA$hou_num)
#MSOA to LSOA
# intersect the two layers
ina <- intersect(Leeds_LSOA, Leeds_MSOA)
# calculate the area of each intersected area
ina$Area <- 0
ina$Area <- area(ina)
# generate a new field named"no." representing the serial number of each intersected section
# each no. represents one intersected section in "ina"
ina$no. <- seq(1,length(ina$pop),1)
# summarise the codes in MSOA, different codes represent different MSOA areas
zone.list <- sort(unique(array(ina$geo_code)))
ina$pops <- 0
ina$area_weight <- 0
# calculate the population in each intersected zone
for (item in zone.list) {
zone.set <- (ina$geo_code == item)
inano.list <- ina$no.[zone.set]
for (item1 in inano.list) {
# calculate the area proportion of each intersected zone in the same MSOA
ina$area_weight[which(ina$no. == item1)] <- ina$Area[which(ina$no. == item1)]/sum(ina$Area[zone.set], na.rm = TRUE)
}
for (item2 in inano.list) {
ina$pops[which(ina$no. == item2)] = ina$Population[which(ina$no. == item2)]*ina$area_weight[which(ina$no. == item2)]
}
}
# check whether the total populaiton is preserved
sum(ina$pops)
sum(Leeds_MSOA$Population)
# calculate the estimated population of the target zones
Leeds_LSOA$pop_estimate <-0
zone.list <- sort(unique(array(ina$code)))
for (item in zone.list){
Leeds_LSOA$pop_estimate[which(Leeds_LSOA$code == item)] <- ina$pops[which(ina$code == item)]
}
# check whether the total populaiton is preserved
sum(Leeds_LSOA$pop_estimate)
sum(Leeds_LSOA$pop)
# calculate the difference between estimated population and actual population
Leeds_LSOA$Areal_weight_error_MSOA_to_LSOA <- Leeds_LSOA$pop_estimate - Leeds_LSOA$pop
# convert the results into csv file
table <- cbind(Leeds_LSOA$code, Leeds_LSOA$pop, Leeds_LSOA$pop_estimate,Leeds_LSOA$Areal_weight_error_MSOA_to_LSOA)
colnames(table) <- c("code", "pop", "estimate", "error")
cor.test(Leeds_LSOA$pop,Leeds_LSOA$pop_estimate)
#Load data
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataNet.RData?raw=True")
## Leeds case
#check the population
sum(Leeds_MSOA$Population, na.rm = T)
sum(Leeds_LSOA$pop, na.rm = T)
sum(Leeds_OA$pop, na.rm = T)
#MSOA to LSOA
# intersect the road layer with MSOA layer
# the intersected layer is a line layer
ina <- st_intersection(Road_Leeds, Leeds_MSOA)
# calculate the length of each intersected road
ina$Length <- st_length(ina)
ina$Length <- as.numeric(ina$Length)
# generate a new field named"ID" representing the serial number of each intersected section
# each ID represents one intersected section in "ina"
ina$ID <- seq(1,length(ina$Length),1)
# summarise the codes in MSOA, different codes represent different MSOA areas
zone.list <- sort(unique(array(ina$geo_code)))
ina$pop <- 0
# calculate the population in each intersected section in "ina"
# in this case, we can consider it as the populaiotn in each road section
for (item in zone.list) {
# select the objects in "ina", the code of which is "item"
# This can select all the objects within the same MSOA area
zone.set <- (ina$geo_code == item)
# find the ID list for the objects in "ina", which are in the same MSOA area
inano.list <- ina$ID[zone.set]
# use the road length proportion as the weight to calculate the populaiton in each intersected section
for (item1 in inano.list) {
ina$pop[which(ina$ID == item1)] <- (ina$Population[which(ina$ID == item1)])*(ina$Length[which(ina$ID == item1)]/sum(ina$Length[zone.set], na.rm = TRUE))
}
}
# check whether the total populaiton is preserved
sum(ina$pop,na.rm = TRUE)
sum(Leeds_MSOA$Population)
# intersect above intersected layer with LSOA layer
# this is for estimating the population in each LSOA area
res <- st_intersection(ina, Leeds_LSOA)
# calculate the length of each intersected road
res$RLength <- st_length(res)
res$RLength <- as.numeric(res$RLength)
# generate a new field named"RID" representing the serial number of each intersected road
# each RID represents one intersected area in "res"
res$RID <- seq(1,length(res$RLength),1)
# summarise the codes in LSOA, different codes represent different LSOA areas
zone.list1 <- sort(unique(array(res$code)))
Leeds_LSOA$Popu_estimate <- 0
# calculate the estimated population in each LSOA area, whose code is "item"
for (item in zone.list1) {
# select the objects in "res", the code of which is "item"
# This can select all the objects within the same LSOA area
zone.set1 <- (res$code == item)
# find the RID list for the objects in "res", the code of which is "item"
resno.list <- res$RID[zone.set1]
pps <- 0
pp <- 0
# calculate the population in each LSOA, whose code is "item"
for (item1 in resno.list) {
# select the objects in "ina" layer, the ID of which is the same with "item1"
zone.set2 <- (res$ID == res$ID[which(res$RID == item1)])
# use the road length proportion as the weight to calculate the populaiton
# the road length proportion is the road length of the object "item1" in "res" divides the total road length in "ina", where "item1" belongs to
pp <- (res$pop[which(res$RID == item1)])*(res$RLength[which(res$RID == item1)]/sum(res$RLength[zone.set2], na.rm = TRUE))
# calculate the total population in the LSOA area whose code is "item"
# This is an iteration, because everytime one object in "res" is added
pps <- pps + pp
}
# calculate the estimated population in the LSOA area whose code is "item"
Leeds_LSOA$Popu_estimate[which(Leeds_LSOA$code == item)] <- pps
}
# check whether the total populaiton is preserved
sum(Leeds_LSOA$Popu_estimate)
sum(Leeds_LSOA$pop)
cor.test(Leeds_LSOA$pop,Leeds_LSOA$Popu_estimate)
rm(list)
library(GISTools)
library(sp)
library(rgdal)
library(rgeos)
library(tmap)
library(scales)
library(ggplot2)
library(rtop)
library(raster)
library(deldir)
library(sf)
library(repmis)
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataDasy.RData?raw=True")
## Leeds case
#MSOA to LSOA
# intersect the land use layer with MSOA layer
ina <- st_intersection(SE_Building_Leeds, Leeds_MSOA)
# calculate the area of each intersected area
ina$Area <- st_area(ina)
ina$Area <- as.numeric(ina$Area)
# generate a new field named"ID" representing the serial number of each intersected section
# each ID represents one intersected area in "ina"
ina$ID <- seq(1,length(ina$Area),1)
# summarise the codes in MSOA, different codes represent different MSOA areas
zone.list <- sort(unique(array(ina$geo_code)))
ina$pop <- 0
# calculate the population in each intersected area in "ina"
# this may take a long time
for (i in 1:length(zone.list)) {
item <- zone.list[i]
# select the objects in "ina", the code of which is "item"
# This can select all the objects within the same MSOA area
zone.set <- (ina$geo_code == item)
# find the ID list for the objects in "ina", which are in the same MSOA area
inano.list <- ina$ID[zone.set]
# use the area proportion as the weight to calculate the populaiton in each intersected zone
for (j in 1:length(inano.list)) {
item1 <- inano.list[j]
ina$pop[which(ina$ID == item1)] <- (ina$Population[which(ina$ID == item1)])*(ina$Area[which(ina$ID == item1)]/sum(ina$Area[zone.set], na.rm = TRUE))
cat(i,":",j,"/",length(inano.list), "\t")
}
}
# check whether the total populaiton is preserved
sum(ina$pop,na.rm = TRUE)
sum(Leeds_MSOA$Population)
# intersect the "ina" layer with LSOA layer
# this is for estimating the population in each LSOA area
res <- st_intersection(ina, Leeds_LSOA)
# calculate the area of each intersected zone in "res"
res$RArea <- st_area(res)
res$RArea <- as.numeric(res$RArea)
# generate a new field named"RID" representing the serial number of each intersected road
# each RID represents one intersected area in "res"
res$RID <- seq(1,length(res$RArea),1)
# summarise the codes in LSOA, different codes represent different LSOA areas
zone.list1 <- sort(unique(array(res$code)))
Leeds_LSOA$Pop_estimate <- 0
# calculate the estimated population in each LSOA area, whose code is "item"
# this may take a long time
for (i in 1:length(zone.list1)) {
item <- zone.list1[i]
# select the objects in "res", the code of which is "item"
# This can select all the objects within the same LSOA area
zone.set1 <- (res$code == item)
# find the RID list for the objects in "res", the code of which is "item"
resno.list <- res$RID[zone.set1]
pps <- 0
pp <- 0
for (j in 1:length(resno.list)) {
item1 <- resno.list[j]
# select the objects in "ina" layer, the ID of which is the same with "item1"
zone.set2 <- (res$ID == res$ID[which(res$RID == item1)])
# use the area proportion as the weight to calculate the populaiton
# the area proportion is area of the object "item1" in "res" divides the total area in "ina", where "item1" belongs to
pp <- (res$pop[which(res$RID == item1)])*(res$RArea[which(res$RID == item1)]/sum(res$RArea[zone.set2], na.rm = TRUE))
# calculate the total population in the LSOA area whose code is "item"
# This is an iteration, because everytime one object in "res" is added
pps <- pps + pp
cat(i,":",j,"/",length(resno.list), "\t")
}
Leeds_LSOA$Pop_estimate[which(Leeds_LSOA$code == item)] <- pps
}
# check whether the total populaiton is preserved
sum(Leeds_LSOA$Pop_estimate)
sum(Leeds_LSOA$pop)
cor.test(Leeds_LSOA$pop, Leeds_LSOA$Pop_estimate)
library(GISTools)
library(sp)
library(rgdal)
library(tmap)
library(scales)
library(ggplot2)
library(rtop)
library(deldir)
library(raster)
library(sf)
library(repmis)
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataHPcensus.RData?raw=True")
## Leeds case
#check the population and household count
sum(Leeds_MSOA$Population, na.rm = T)
sum(Leeds_LSOA$pop, na.rm = T)
sum(Leeds_OA$pop, na.rm = T)
sum(Leeds_MSOA$hou_num)
sum(Leeds_LSOA$hou_num)
sum(Leeds_OA$hou_num)
#MSOA to LSOA
# convert the LSOA layer into point layer for intersection
Leeds_LSOA$no. <- seq(1,length(Leeds_LSOA$code),1)
px <- CRS(proj4string(Leeds_LSOA))
res <- SpatialPointsDataFrame(coordinates(Leeds_LSOA),proj4string=px,data.frame(pop=Leeds_LSOA$pop,hou_num=Leeds_LSOA$hou_num,no.=Leeds_LSOA$no.))
# intersect the two layers
ina <- intersect(res, Leeds_MSOA)
# summarise the codes in MSOA, different codes represent different MSOA areas
ina$code <- as.character(ina$geo_code)
zone.list <- sort(unique(array(ina$code)))
Leeds_LSOA$Pop_estimate <- 0
ina$pop_hou <- 0
# calculate the estimated population in each LSOA area, whose code is "item"
for (item in zone.list) {
# select the objects in "ina", the code of which is "item"
# This can select all the objects within the same MSOA area
zone.set <- (ina$code == item)
# find the ID list for the objects in "ina", the code of which is "item"
inano.list <- ina$no.[zone.set]
# use the household count proportion as the weight to calculate the populaiton
# the household count proportion is household count of the object "item1" in "ina" divides the total household in the MSOA area, where "item1" belongs to
for (item1 in inano.list) {
ina$pop_hou[which(ina$no. == item1)] <- (ina$Population[item1])*(ina$hou_num[item1]/sum(ina$hou_num[zone.set], na.rm = TRUE))
Leeds_LSOA$Pop_estimate[which(Leeds_LSOA$no. == item1)] <- ina$pop_hou[which(ina$no. == item1)]
}
}
# check whether the total populaiton is preserved
sum(Leeds_LSOA$Pop_estimate)
sum(Leeds_LSOA$pop)
# calculate the difference between estimated population and actual population
Leeds_LSOA$Household_census_error_MSOA_to_LSOA <- Leeds_LSOA$Pop_estimate - Leeds_LSOA$pop
# convert the results into csv file
table <- cbind(Leeds_LSOA$code, Leeds_LSOA$pop, Leeds_LSOA$Pop_estimate,Leeds_LSOA$Household_census_error_MSOA_to_LSOA)
colnames(table) <- c("code", "pop", "estimate", "error")
cor.test(Leeds_LSOA$Pop_estimate, Leeds_LSOA$pop)
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataHPsales.RData?raw=True")
## Leeds case
#MSOA to LSOA
# intersect the house sales data layer with MSOA layer
# the intersected layer is a point layer
ina <- st_intersection(Leeds_house, Leeds_MSOA)
# generate a new field named"no." representing the serial number of each intersected point
# each no. represents one intersected point in "ina"
ina$no. <- seq(1,length(ina$household),1)
# summarise the codes in MSOA, different codes represent different MSOA areas
zone.list <- sort(unique(array(ina$geo_code)))
ina$pop_hou <- 0
# calculate the population in each intersected point in "ina"
# this may take a long time
for (i in 1:length(zone.list)) {
item <- zone.list[i]
# select the objects in "ina", the code of which is "item"
# This can select all the objects within the same MSOA area
zone.set <- (ina$geo_code == item)
# find the no. list for the objects in "ina", which are in the same MSOA area
inano.list <- ina$no.[zone.set]
# use the household count proportion as the weight to calculate the populaiton in each intersected point
for (j in 1:length(inano.list)) {
item1 <- inano.list[j]
ina$pop_hou[which(ina$no. == item1)] <- (ina$Population[which(ina$no. == item1)])*(ina$household[which(ina$no. == item1)]/sum(ina$household[zone.set], na.rm = TRUE))
cat(i,":",j,"/",length(inano.list), "\t")
}
}
# check whether the total populaiton is preserved
sum(ina$pop_hou,na.rm = TRUE)
sum(Leeds_MSOA$Population)
# intersect the "ina" layer with LSOA layer
# this is for estimating the population in each LSOA area
res <- st_intersection(ina,Leeds_LSOA)
# summarise the codes in LSOA, different codes represent different LSOA areas
zone.list1 <- sort(unique(array(res$code)))
Leeds_LSOA$Pop_estimate <- 0
# calculate the estimated population in each LSOA area, whose code is "item"
for (i in 1:length(zone.list1)) {
item <- zone.list1[i]
zone.set <- (res$code == item)
# sum the population of the points in "res", which falls in the same LSOA
Leeds_LSOA$Pop_estimate[which(Leeds_LSOA$code == item)] <- sum(res$pop_hou[zone.set],na.rm = TRUE)
cat(i,"/",length(zone.list1), "\t")
}
# check whether the total populaiton is preserved
sum(Leeds_LSOA$Pop_estimate)
sum(Leeds_LSOA$pop)
# calculate the difference between estimated population and actual population
Leeds_LSOA$Household_sales_error_MSOA_to_LSOA <- Leeds_LSOA$Pop_estimate - Leeds_LSOA$pop
cor.test(Leeds_LSOA$pop, Leeds_LSOA$Pop_estimate)
# Check and intstall packages
if (!is.element("GISTools", installed.packages()))
install.packages("GISTools", dep = T)
if (!is.element("sp", installed.packages()))
install.packages("sp", dep = T)
if (!is.element("rgdal", installed.packages()))
if (!is.element("tmap", installed.packages()))
install.packages("rgdal", dep = T)
if (!is.element("rgeos", installed.packages()))
install.packages("tmap", dep = T)
if (!is.element("scales", installed.packages()))
install.packages("scales", dep = T)
if (!is.element("ggplot2", installed.packages()))
if (!is.element("rtop", installed.packages()))
install.packages("ggplot2", dep = T)
install.packages("rgeos", dep = T)
install.packages("rtop", dep = T)
if (!is.element("deldir", installed.packages()))
install.packages("rtop", dep = T)
install.packages("rgeos", dep = T)
# Check and intstall packages
if (!is.element("GISTools", installed.packages()))
install.packages("GISTools", dep = T)
if (!is.element("sp", installed.packages()))
install.packages("sp", dep = T)
if (!is.element("rgdal", installed.packages()))
install.packages("rgdal", dep = T)
if (!is.element("rgeos", installed.packages()))
install.packages("rgeos", dep = T)
if (!is.element("tmap", installed.packages()))
install.packages("tmap", dep = T)
if (!is.element("scales", installed.packages()))
install.packages("scales", dep = T)
if (!is.element("ggplot2", installed.packages()))
install.packages("ggplot2", dep = T)
if (!is.element("rtop", installed.packages()))
install.packages("rtop", dep = T)
if (!is.element("deldir", installed.packages()))
install.packages("deldir", dep = T)
if (!is.element("raster", installed.packages()))
install.packages("raster", dep = T)
if (!is.element("sf", installed.packages()))
install.packages("sf", dep = T)
if (!is.element("repmis", installed.packages()))
install.packages("repmis", dep = T)
if (!is.element("Rmisc", installed.packages()))
install.packages("Rmisc", dep = T)
if (!is.element("car", installed.packages()))
install.packages("car", dep = T)
# Check and intstall packages
if (!is.element("GISTools", installed.packages())) install.packages("GISTools", dep = T)
# Check and intstall packages
if (!is.element("GISTools", installed.packages())) install.packages("GISTools", dep = T)
if (!is.element("sp", installed.packages()))  install.packages("sp", dep = T)
if (!is.element("rgdal", installed.packages()))
install.packages("rgdal", dep = T)
# Check and intstall packages
if (!is.element("GISTools", installed.packages()))
install.packages("GISTools", dep = T)
if (!is.element("sp", installed.packages()))
install.packages("sp", dep = T)
if (!is.element("rgdal", installed.packages()))
install.packages("rgdal", dep = T)
if (!is.element("rgeos", installed.packages()))
install.packages("rgeos", dep = T)
if (!is.element("tmap", installed.packages()))
install.packages("tmap", dep = T)
if (!is.element("scales", installed.packages()))
install.packages("scales", dep = T)
install.packages("ggplot2", dep = T)
if (!is.element("rtop", installed.packages()))
if (!is.element("ggplot2", installed.packages()))
install.packages("rtop", dep = T)
if (!is.element("deldir", installed.packages()))
install.packages("deldir", dep = T)
if (!is.element("ggplot2", installed.packages()))
install.packages("ggplot2", dep = T)
if (!is.element("rtop", installed.packages()))
install.packages("rtop", dep = T)
if (!is.element("deldir", installed.packages()))
install.packages("deldir", dep = T)
if (!is.element("raster", installed.packages()))
install.packages("raster", dep = T)
if (!is.element("sf", installed.packages()))
install.packages("sf", dep = T)
if (!is.element("repmis", installed.packages()))
install.packages("repmis", dep = T)
if (!is.element("Rmisc", installed.packages()))
install.packages("Rmisc", dep = T)
if (!is.element("car", installed.packages()))
install.packages("car", dep = T)
# load packages
library(GISTools)
if (!is.element("car", installed.packages()))
install.packages("car", dep = T)
if (!is.element("GGally", installed.packages()))
install.packages("GGally", dep = T)
# load packages
library(GISTools)
library(sp)
library(rgdal)
library(ggplot2)
library(tmap)
library(rtop)
library(sf)
library(scales)
library(repmis)
library(Rmisc)
# Load Data
source_data("https://github.com/Wen-Zeng/Areal-Interpolation/blob/master/DataHist.RData?raw=True")
library(GGally)
sessionInfo()
load("E:/Areal-Interpolation/DataHPsales.RData")
load("E:/Areal-Interpolation/DataHPsales.RData")
